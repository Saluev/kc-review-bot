// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package github

import (
	"github.com/google/go-github/v25/github"
	"sync"
)

var (
	lockclientWrapperMockloadPRs        sync.RWMutex
	lockclientWrapperMockloadRepository sync.RWMutex
	lockclientWrapperMockloadReviews    sync.RWMutex
)

// Ensure, that clientWrapperMock does implement clientWrapper.
// If this is not the case, regenerate this file with moq.
var _ clientWrapper = &clientWrapperMock{}

// clientWrapperMock is a mock implementation of clientWrapper.
//
//     func TestSomethingThatUsesclientWrapper(t *testing.T) {
//
//         // make and configure a mocked clientWrapper
//         mockedclientWrapper := &clientWrapperMock{
//             loadPRsFunc: func(owner string, repo string) []*github.PullRequest {
// 	               panic("mock out the loadPRs method")
//             },
//             loadRepositoryFunc: func(owner string, repo string) *github.Repository {
// 	               panic("mock out the loadRepository method")
//             },
//             loadReviewsFunc: func(owner string, repo string, number int) []*github.PullRequestReview {
// 	               panic("mock out the loadReviews method")
//             },
//         }
//
//         // use mockedclientWrapper in code that requires clientWrapper
//         // and then make assertions.
//
//     }
type clientWrapperMock struct {
	// loadPRsFunc mocks the loadPRs method.
	loadPRsFunc func(owner string, repo string) []*github.PullRequest

	// loadRepositoryFunc mocks the loadRepository method.
	loadRepositoryFunc func(owner string, repo string) *github.Repository

	// loadReviewsFunc mocks the loadReviews method.
	loadReviewsFunc func(owner string, repo string, number int) []*github.PullRequestReview

	// calls tracks calls to the methods.
	calls struct {
		// loadPRs holds details about calls to the loadPRs method.
		loadPRs []struct {
			// Owner is the owner argument value.
			Owner string
			// Repo is the repo argument value.
			Repo string
		}
		// loadRepository holds details about calls to the loadRepository method.
		loadRepository []struct {
			// Owner is the owner argument value.
			Owner string
			// Repo is the repo argument value.
			Repo string
		}
		// loadReviews holds details about calls to the loadReviews method.
		loadReviews []struct {
			// Owner is the owner argument value.
			Owner string
			// Repo is the repo argument value.
			Repo string
			// Number is the number argument value.
			Number int
		}
	}
}

// loadPRs calls loadPRsFunc.
func (mock *clientWrapperMock) loadPRs(owner string, repo string) []*github.PullRequest {
	if mock.loadPRsFunc == nil {
		panic("clientWrapperMock.loadPRsFunc: method is nil but clientWrapper.loadPRs was just called")
	}
	callInfo := struct {
		Owner string
		Repo  string
	}{
		Owner: owner,
		Repo:  repo,
	}
	lockclientWrapperMockloadPRs.Lock()
	mock.calls.loadPRs = append(mock.calls.loadPRs, callInfo)
	lockclientWrapperMockloadPRs.Unlock()
	return mock.loadPRsFunc(owner, repo)
}

// loadPRsCalls gets all the calls that were made to loadPRs.
// Check the length with:
//     len(mockedclientWrapper.loadPRsCalls())
func (mock *clientWrapperMock) loadPRsCalls() []struct {
	Owner string
	Repo  string
} {
	var calls []struct {
		Owner string
		Repo  string
	}
	lockclientWrapperMockloadPRs.RLock()
	calls = mock.calls.loadPRs
	lockclientWrapperMockloadPRs.RUnlock()
	return calls
}

// loadRepository calls loadRepositoryFunc.
func (mock *clientWrapperMock) loadRepository(owner string, repo string) *github.Repository {
	if mock.loadRepositoryFunc == nil {
		panic("clientWrapperMock.loadRepositoryFunc: method is nil but clientWrapper.loadRepository was just called")
	}
	callInfo := struct {
		Owner string
		Repo  string
	}{
		Owner: owner,
		Repo:  repo,
	}
	lockclientWrapperMockloadRepository.Lock()
	mock.calls.loadRepository = append(mock.calls.loadRepository, callInfo)
	lockclientWrapperMockloadRepository.Unlock()
	return mock.loadRepositoryFunc(owner, repo)
}

// loadRepositoryCalls gets all the calls that were made to loadRepository.
// Check the length with:
//     len(mockedclientWrapper.loadRepositoryCalls())
func (mock *clientWrapperMock) loadRepositoryCalls() []struct {
	Owner string
	Repo  string
} {
	var calls []struct {
		Owner string
		Repo  string
	}
	lockclientWrapperMockloadRepository.RLock()
	calls = mock.calls.loadRepository
	lockclientWrapperMockloadRepository.RUnlock()
	return calls
}

// loadReviews calls loadReviewsFunc.
func (mock *clientWrapperMock) loadReviews(owner string, repo string, number int) []*github.PullRequestReview {
	if mock.loadReviewsFunc == nil {
		panic("clientWrapperMock.loadReviewsFunc: method is nil but clientWrapper.loadReviews was just called")
	}
	callInfo := struct {
		Owner  string
		Repo   string
		Number int
	}{
		Owner:  owner,
		Repo:   repo,
		Number: number,
	}
	lockclientWrapperMockloadReviews.Lock()
	mock.calls.loadReviews = append(mock.calls.loadReviews, callInfo)
	lockclientWrapperMockloadReviews.Unlock()
	return mock.loadReviewsFunc(owner, repo, number)
}

// loadReviewsCalls gets all the calls that were made to loadReviews.
// Check the length with:
//     len(mockedclientWrapper.loadReviewsCalls())
func (mock *clientWrapperMock) loadReviewsCalls() []struct {
	Owner  string
	Repo   string
	Number int
} {
	var calls []struct {
		Owner  string
		Repo   string
		Number int
	}
	lockclientWrapperMockloadReviews.RLock()
	calls = mock.calls.loadReviews
	lockclientWrapperMockloadReviews.RUnlock()
	return calls
}
